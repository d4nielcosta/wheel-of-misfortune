{"version":3,"sources":["name-selector/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","styled","_ref","margin","theme","spacing","ChipsArray","_React$useState","React","_React$useState2","Object","slicedToArray","chips","setChips","_React$useState3","String","_React$useState4","nameToAdd","setNameToAdd","_React$useState5","_React$useState6","deleteOnPickToggle","setDeleteOnPickToggle","_React$useState7","_React$useState8","namePicked","setNamePicked","react","className","TextField","id","variant","label","color","value","onChange","e","target","onKeyPress","key","concat","toConsumableArray","Paper","sx","display","justifyContent","flexWrap","listStyle","p","m","component","map","data","Chip","avatar","Avatar","onDelete","chipToDelete","filter","chip","Grid","container","item","xs","FormGroup","FormControlLabel","control","Switch","labelPlacement","checked","Button","size","onClick","pickedName","Math","floor","random","length","App","react_default","a","createElement","Card","href","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.0aa35b4d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport Paper from '@mui/material/Paper';\nimport Avatar from '@mui/material/Avatar';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Switch from '@mui/material/Switch';\n\nimport './index.css';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Grid from '@mui/material/Grid';\n\ninterface ChipData {\n    key: string;\n    label: string;\n}\n\nconst ListItem = styled('li')(({ theme }) => ({\n    margin: theme.spacing(0.5),\n}));\n\nexport default function ChipsArray() {\n    const [chips, setChips] = React.useState<any[]>([]);\n    const [nameToAdd, setNameToAdd] = React.useState(String);\n    const [deleteOnPickToggle, setDeleteOnPickToggle] = React.useState(false);\n    const [namePicked, setNamePicked] = React.useState<ChipData | undefined>();\n\n    const handleDelete = (chipToDelete: ChipData) => () => {\n        if (chipToDelete) {\n            setChips((chips) => chips.filter((chip) => chip.key !== chipToDelete.key));\n        }\n    };\n\n    const onKeyPress = (key: React.Key) => {\n        if (key === 'Enter') {\n            setChips((chips) => {\n                return [...chips, { key: nameToAdd, label: nameToAdd }];\n            });\n            setNameToAdd(\"\");\n        }\n\n    }\n\n    const pickAName = () => {\n        let pickedName = chips[Math.floor(Math.random() * chips.length)];\n        setNamePicked(pickedName);\n        if (deleteOnPickToggle) {\n            setChips((chips) => chips.filter((chip) => chip.key !== pickedName.key));\n        }\n    };\n\n    return (\n        <div>\n            <hr className=\"marginedHR\" />\n\n            <TextField id=\"namesInput\" variant=\"filled\" label=\"Enter name\" color=\"secondary\" value={nameToAdd} onChange={e => setNameToAdd(e.target.value)} onKeyPress={e => onKeyPress(e.key)} />\n\n            <Paper id=\"chipsPaper\"\n                sx={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    flexWrap: 'wrap',\n                    listStyle: 'none',\n                    p: 0.5,\n                    m: 0,\n                }}\n                component=\"ul\"\n            >\n\n                {chips.map((data) => {\n\n                    return (\n                        <ListItem key={data.key}>\n                            <Chip\n                                label={data.label}\n                                color='secondary'\n                                avatar={<Avatar>{data.label[0]}</Avatar>}\n                                onDelete={handleDelete(data)}\n                            />\n                        </ListItem>\n                    );\n                })}\n            </Paper>\n\n            <hr className=\"marginedHR\" />\n\n            <Grid container>\n            <Grid item xs={6}>\n                    <FormGroup>\n                        <FormControlLabel control={<Switch />} label=\"Delete name on getting picked\" labelPlacement=\"start\" checked={deleteOnPickToggle} onChange={e => setDeleteOnPickToggle(!deleteOnPickToggle)} />\n                    </FormGroup>\n                </Grid>\n                <Grid item xs={4}>\n                    <Button variant=\"contained\" size=\"large\" onClick={pickAName}> Pick a Name </Button>\n                </Grid>\n                \n            </Grid>\n            <div className='centreGridCell'>\n\n                <h1 id='pickedName'>{namePicked ? namePicked.label : \"\"}</h1>\n            </div>\n\n        </div >\n    );\n}","import React from 'react';\nimport './App.css';\nimport NameSelector from './name-selector';\nimport Card from '@mui/material/Card';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Card className=\"outerCard\">\n        <h1>Wheel of Misfortune</h1>\n        <NameSelector />\n      </Card>\n      <Card className=\"footer\">\n        <p> Developed by <a href=\"https://github.com/d4nielcosta\">Daniel Costa</a></p>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}